#+OPTIONS: ^:{}
* Master Emacs in one year                                                      :emacs:en:
#+OPTIONS: toc:nil
  :PROPERTIES:
  :ID:       o2b:24796fba-6de7-4712-b83e-b86969c31335
  :POST_DATE: [2012-01-31 Tue 15:08]
  :POSTID:   268
  :ARCHIVE_TIME: 2012-12-26 Wed 19:21
  :ARCHIVE_FILE: ~/projs/mastering-emacs-in-one-year-guide/guide-zh.org
  :ARCHIVE_CATEGORY: emacs
  :END:
Author: Chen Bin (redguardtoo)

Version: 20140722

Updated: <2014-07-22 Tue>

Created: [2012-01-31 Tue 15:08]

Copyright: This work is licensed under the [[http://creativecommons.org/licenses/by-nc-nd/3.0/][Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License]].

** Introduction
I was a Microsoft fan for many years because I was born in China. There was no Unix culture when I was young. My professor knew as much as I knew about Unix. Zero knowledge. Nothing. I believed Microsoft Windows was only platform worth develop software on. I believed Visual Studio was the best IDE in the world. I was so loyal to Microsoft that I used Visual Studio to edit code running on Linux server during my first job.

Besides, computers scared me to death. I'm ashamed to admit now that when I graduated from university I didn't know clipboard. If I need input duplicated texts, I typed them character by character. I chose an IT career simply for money. There was no other career path for talented young people in China then.

The points,
- This guide is on using Emacs as a professional's tool to get job done. I will not show off Emacs as a geek's toy because as you can see I am NOT that type from the beginning. I will focus on philosophy and methodology only. No technical details involved.
- If a computer dummy like me can [[https://github.com/redguardtoo][be good at Emacs in one year]], you definitely can do better as well.

** Why Emacs (OPTIONAL)
I keep this section short because the focus is HOW instead WHY.
*** Once you have mastered Emacs, you are good at all other editors
*** The community behind Emacs is technically strong
Emacs is developed by Lisp whose syntax is different from common programming languages. A developer who is curious enough to try Lisp is possibly more intelligent than average.  Lisp is often the third language he/she learns (Java/C/C# is the first, a script language like Bash/Python/Perl/Ruby is the second).

No job ad will list Emacs as a required skill. That's actually a good thing. It ensures that only honest technical guys exist in Emacs community.
*** Emacs can get job done more efficiently
IDE is usually optimized for special programming language or application framework. But Emacs is much more powerful on general work flow.

When people say IDE is good for programming. They are usually talking about code navigation, code completion and real time documentation lookup.

For solving the hardest and general design problem, we usually spend more time on reading, investigation and communication. A typical workflow is like paste prototype code into [[http://pastebin.com/]] or [[https://gist.github.com/]], ask people in IRC, search in stackoverflow and paste the code back. Emacs has support for IRC and browser (w3m). So the workflow could be followed easily.

I have more than 10 year experience on most commercial IDEs. Trust me, Emacs is better for most programming tasks.

As a proof, check out the video demos of Emacs operation below:
- [[http://www.youtube.com/watch?v=Ho6nMWGtepY][Writing PPT with org-mode and beamer in Emacs ]]
- [[http://www.youtube.com/watch?v=EQAd41VAXWo][Emacs Power: Can your editor do THIS! ]]
*** Emacs is maintained by Free Software Foundation (FSF)
FSF has been around for almost 40 years. I assume it will exist for next 40 years. So Emacs will live for a very long time. My investment on Emacs will never expire.
*** No overhead
Pro:
- Emacs is open sourced 
- it supports all platforms.
- it's configuration is simple text

So I can start work in any environment in 5 minutes with Emacs. On windows, I only need download portable Emacs executable. Done! My set up is only a folder containing some text files.

For example, I used to work for a project which required me editing perl/java/C/bash/SQL code at the same time. The code is hosted on some remote sever far way from my office. We don't have the quickest network connection in the world so we do all the work in command line and shell. So Emacs is the only choice.

*** Use your spare time in one year
When I say Emacs needs one year. I mean the spare time of one year. The key point is have fun and let Emacs solve your practical problem.
*** What matters is Attitude
How good you will be at Emacs is determined by your attitude,

Key tips:
- Be open minded. For example, why not try Vim key binding after being familiar with Emacs default key binding. Or vice versa.
- Bettering yourself is the purpose. For example, there are several good plugins to do the sub-windows navigation. Spend some time to try them all to find the most efficient one.
- Half a tale is enough for a wise man. For example, when a guy showed off [[http://www.sublimetext.com/][Sublime Text]] to me, I realized that there should exist [[https://github.com/alloy-d/color-theme-molokai][similar beautiful skin]] in Emacs and I immediately switched my Emacs color theme.
** Step by Step Guide
*** Quick guide for greenhands of Linux/Unix (OPTIONAL) 
Here are the steps:
- Install Emacs 24
- Don't install any plugins
- Learn basic knowledge about [[http://en.wikipedia.org/wiki/Environment_variable][environment variable]] and [[http://en.wikipedia.org/wiki/Redirection_%28computing%29][pipe]]
- Read offical tutorial
- Use org-mode
- The only hot key you need learn in org-mode is TAB key

Use Emacs in this way for several days or several weeks.
*** Read the official tutorial
Start Emacs, press ALT and X key together (M-x is used as abbreviation for Alt-X, C-x for Ctrl-X from now on). Input "help-with-tutorial", press ENTER. That's all you need to open the tutorial.

Reading this tutorial will take you about half an hour. It's not too much time to learn a life time skill.

Reading tutorial is essential. Do not skip this step. For example, many Emacs newbies asked me how to open online help for some command which could be answered by reading the tutorial.

*** Find *your first practical problem* Emacs can solve
That's the most important question you need ask yourself before you start.

The learning is like investment. If you can get huge benefit by investing a little time, you will be motivated and keep on the learning.

Me, for example, have spent many years looking for some time-management tool until I find the [[http://orgmode.org/][org-mode]] (a Emacs plugin).
*** Standing on the shoulders of giants
Please note *this section is the most important part* of the whole article!

I learned this lesson the hard way. At the beginning, I regarded Emacs as some geek's toy. I digged around the internet for the elisp code I can pasted into my ~/.emacs.

That's totally waste of time if my goal is to become an Emacs master!

I should copy the master [[https://github.com/purcell/emacs.d][Steve Purcell]] set up at the beginning!

Please don't repeat my mistake. Don't hesitate. Just follow Steven Purcell!

Let me be blunt. You are a newbie, you'd better copy and study top geek's code. Don't try to be creative at this stage. You'll waste your time re-invent the wheel.

For example, some readers tell me that Emacs has too many hot keys. They can't memorize all of them. This is typical behavior in newbies. They assume that top geeks can remember more key bindings.

Wrong!

If you have studied any guru's set up, you will find that he/she use "smex" to remember the frequently used command which is often more efficient than pressing hot keys. So masters don't remember key bindings intentionally.

Steve Purcell updates his set up frequently. If you prefer more stable set up, you can use [[http://eschulte.github.io/emacs-starter-kit/][Eric Schulte's Emacs Starter Kit]].

If you are still not convinced, consider my reasons:
- When I say mastering Emacs, I mean it. It's not OK at Emacs. It's not good at Emacs. It's actually among the best ones.
- Let's consider those giants. They are more intelligent than me. They are more hard working than me. How can I reach their level asap?
- The obvious way is join them.
- If you can report a bug about master's set up. At least at that moment you has proved you are better at certain issue than master.
** Join the community
I suggest focusing on Emacs only in order to take full advantage of communities.

For example, although Quora.com has lots of interesting stuffs, *donot* read/subscribe/follow them unless it's highly releated to Emacs.
*** Google Plus
[[https://plus.google.com/communities/114815898697665598016][Emacs community on 
Google Plus]] is the best Emacs community. The average quality of discuss on Google Plus is better than other communities.

BTW, the famous Emacs geek [[https://plus.google.com/113859563190964307534][Xah Lee]] hosts a Q/A session at Google Plus every Tuesday. His web site is [[http://xahlee.org/]]. His site is especially useful for elisp programming.

*** Github
It's a developer's social network.

You can search [[https://github.com/languages/Emacs%20Lisp]] for latest Elisp code.
*** Emacs blogs
[[http://planet.emacsen.org/][Planet Emacsen]] is the collection of several Emacs blogs.
*** Quora.com
I suggest follow the question on more specific topic instead general one. For example, "What's the best Emacs addon" is a more useful question than "How to learn Emacs".

 
Everybody has something to say about a general question. But to answer a specific question, you need actual experience and knowledge.

Even you are only interestd in general questions, start from more practical question is still better. You can find the real master from that question.
*** Blogs
[[http://planet.emacsen.org/][Planet Emacsen]] is the best collection of Emacs related blogs.
*** Twitter
I use keyword "emacs :en" to search latest news. The reason to search English only twitter is that there are lots of Japanese post and I don't know Japanese.
*** StackOverflow
google "emacs-related-keywords site:stackoverflow.com"

The quality on stackoverflow discussion is good but there are not many new questions about Emacs there.
*** Youtube
There are lots of wonderful Emacs videos on youtube. For example,
[[http://www.youtube.com/watch?feature=player_embedded&v=oJTwQvgfgMM][Emacs Org-mode - a system for note-taking and project planning]] is the tutorial which enlighten me on using org-mode. Carsten Dominik make me realize that org-mode is simple, all I need remember is press "TAB" key to expand a text node. That's the kill feature of org-mode. All the other stuff could be regarded as bonus features and can be learned later.

The issue of youtube is that the best matched search results are listed first. So you will always see the same results. I suggest sorting the results by upload date.
** Readings
*** EmacsWiki
[[http://www.emacswiki.org/emacs/][EmacsWiki]] has all the tips you need for tweak the Emacs. It's actively maintained by the community.

*** Emacs Lisp book
The only paper book you need read is [[http://www.amazon.com/Writing-GNU-Emacs-Extensions-Glickstein/dp/1565922611][Writing GNU Emacs Extensions]] by Bob Glickstein. I like his style and the way he organizes chapters.

Xah Lee [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Emacs Lisp tutorial]] is good and easy to read.

Steve Yegge's [[http://steve-yegge.blogspot.com.au/2008/01/emergency-elisp.html][Emergency Elisp]] is great because it's short and includes all necessary knowledge for writing Emacs Lisp.
** Knowledge management 
*** Place your set up at Github, *publicly*
I uploaded my set up onto [[https://github.com/redguardtoo/emacs.d]].

Version control is the most efficient way of knowledge management because you will never lose set up at any time.

I benefit a lot by sharing. People who use my set up are actually doing the QA for me.

For example, people reported that I got some personal thing (my personal email, full path of my hobby project) into my set up. They expect my set up usable out of the box.

So I re-organized my set up and place personal stuff into a independent file named "privacy.el". It's outside of my Emacs configuration. Then it occurred to me that in corporate environment it's not safe to store my privacy.el on a shared computer without encryption. After some research, I found Emacs provided [[http://www.emacswiki.org/emacs/EasyPG][a perfect solution]] for this issue since version 23.

*** Dropbox
I place all the Emacs related documents at Dropbox. Since dropbox will synchronize the documents into my mobile phone. I can study Emacs when commuting.
** My favorite Emacs addons
| Name                | Description                                  | Alternatives                      |
|---------------------+----------------------------------------------+-----------------------------------|
| [[http://www.emacswiki.org/emacs/Evil][Evil]]                | convert Emacs to vim                         | none                              |
| Org                 | GTD                                          | none                              |
| company-mode        | code completion                              | cedet, auto-complete              |
| expand-region       | selection region efficiently                 | none                              |
| smex                | Input command efficiently                    | none                              |
| yasnippet           | text template                                | none                              |
| flymake-xxxx        | addons whose prefix is flymake. Syntax check | flycheck                          |
| helm                | a framework to select/search from candidates | ido                               |
| ido                 | similar to helm                              | helm                              |
| js2-mode            | everything for javascript                    | javascript-mode,js-mode,js3-mode  |
| w3m                 | browser                                      | Eww                               |
| elnode              | web server                                   | none                              |
| smartparens         | auto insert matched parens                   | autopair                          |
| [[https://github.com/nschum/window-numbering.el][window-numbering.el]] | jump focus between sub-windows               | switch-window.el                  |
| [[https://github.com/fxbois/web-mode][web-mode]]            | everything for edit HTML templates           | nxml-mode、nxhtml-mode、html-mode |

** Emacs is a way of life
Emacs guys have different ways of life. They are basically people who are hacking Lisp code for fun. Sometimes they will get the job done in a creative way. For example, [[http://sachachua.com/blog/][Sacha Chua]] mentioned that [[http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/][she let Emacs read the manual when cooking]].
** FAQ
*** Any documentation on Steve Purcell's set up?
Nope. Read its README and code comment. The header of the code file usually has some usage guide.
*** Any simpler set up than Steve Pucell?
Use [[https://github.com/redguardtoo/emacs.d][my set up]].

I do some desktop development. So my set up may has less web stuff than Purcell.
*** As a Vi guy, why should I turn to Emacs?
I was a Vi guy. I turn to Emacs because it's powerful and it can be extended with Lisp.

Vi is efficient in text editing because its model editing. In Emacs, you can use [[http://www.emacswiki.org/emacs/Evil][Evil]] to simulate Vim.
*** I don't like Emacs key bindings
[[http://ergoemacs.org/][ergoemacs]] if you prefer Microsoft's key bindings.
*** Emacs has too many key bindings to memorise
Use [[http://www.emacswiki.org/Smex][Smex]]. It's a myth that Emacs guru need remember lots of key bindings.
*** I am not comfortable with other people's set up. Can I modify it?
Try to understand master's set up. Don't make judgment too early. It's easy to make judgment. But understanding needs wisdom and hard work.

For example, some people reported that there some weird character at column 80 in Emacs. That's actually a feature to remind you not to create line more than 80 columns. [[http://www.emacswiki.org/emacs/EightyColumnRule][Here is the reason]].

*** Copy the master's set up but the package is not updated/installed. No error message.
Remove the file .emacs in your HOME directory. The .emacs.d/init.el has same functionality.
*** Any specific question about Emacs
Please,
- read official tutorial
- google
For example, google "emacswiki init.el" to understand what's the init.el
*** I got some error when start Emacs with master's set up
Make sure you already installed third party command line tools which are OPTIONAL. Check [[https://github.com/redguardtoo/emacs.d][my README]] for the list.

Run "emacs -nw --debug-init" in terminal. Then send the error message to the author of the set up. Please use bug track tool if possible.

*** My simple set up is more controllable
That's what I thought at the beginning. After several months I realized that I could never be as good as master like Steve Purcell if keeping this way.

While I spend serveral weeks to overcome some minor issues in Emacs set up, Purcell has already installed/developed dozens of cool plugins.

If I cannot win, the only strategy is to join him, that's why I clone his set up and start to report bug for him. Here is [[https://github.com/purcell/emacs.d/issues/6][first issue I reported]]. Besides, reporting bugs also gives you the opportunity to talk with Master.

So don't run away from the masters' huge set up. Regard it as a challenge to improve yourself.
*** Why I cannot add my own plugins after using Master's set up
Though the quality of Emacs plugins are generally good, they may have compatibility issues simply because plugins are developed by different people. For example, both [[https://github.com/auto-complete][auto-complete]] and [[https://github.com/capitaomorte/yasnippet][yasnippet]] will use TAB key to expand code. So there is confict if I use both plugins.

That's another reason to stick to master's set up at the beginning.
*** How to use Emacs on windows
Install Cygwin!

When you have enough knowledge about environment variables and pipe. You can check [[http://stackoverflow.com/questions/3286723/emacs-cygwin-setup-under-windows/13245173#13245173][My answer at stackoverflow]] to use native windows version.

*** Is code-navigation and code-completion as good as commercial IDE?
Thanks to [[http://clang.llvm.org/][clang]] && [[http://www.gnu.org/software/global/][GNU Global]], C++ is perfect now. Support for other languages are also good enough. 
*** Why Emacs cannot download packages?
If you are living in North Korea, Iran, China, you need below command line to start Emacs:
#+BEGIN_SRC elisp
http_proxy=your-proxy-server-ip:port emacs -nw
#+END_SRC

How to set up proxy server is not covered here.
*** As a greenhand of Emacs, should I learn Emacs lisp at first?
NO. Most people will lose the interest in Lisp because there is not enough stimulus. You can finish the Java/C#/Javascript course because that's required by profitable jobs.

That's why I stress that you need avoid tweaking Emacs and copy master's set up. Try to use Emacs asap.
*** I know the basic operation. What should I learn next?
Find your practical problem which only Emacs can do best. Trust me, Emacs is much more powerful than your wildest imagination.

Here is my example:
- When I use wordpress blog, I use [[https://github.com/punchagan/org2blog][org2blog]] to post articles. It's ten times faster than any other client.
- I installed cmake-mode to do the cross-platform development with [[http://www.cmake.org/Wiki/CMake/Editors/Emacs][cmake]].
- window-numbering.el is useful when jumping focus between sub-windows.
- When I work for some huge projects, I use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to comment code lines because I need deal with too many programming languages. 
** Contact me
My [[https://twitter.com/#!/chen_bin][twitter]] and [[https://plus.google.com/110954683162859211810][google plus]].

My blog is [[http://blog.binchen.org]].

Please donot ask me basic or general questions since I've already show you how to find answer.
** Summary
Start from fun, follow the best people, reading and practice.

I recognize that all roads lead to Rome. So other methods may also work. But my method DID work on me.

This whole article is basically the summary of how I figure out my way to Rome.

My only suggestion is, it does not matter which way you take, what matters is to regard Emacs as professional's tools which deserve your highest respect.

*** Report bug
This article is published at [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide]].

Please use github's bug tracker instead of sending me email for your own good. Github notification mail is always in my first priority folder.

*** I will provide long-term update
Emacs is actually more a community than a software. Interesting people and addons keep popping up. I will update this article from time to time in the future.