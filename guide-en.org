#+OPTIONS: ^:{}
* Master Emacs in one year                                                      :emacs:en:
#+OPTIONS: toc:nil
  :PROPERTIES:
  :ID:       o2b:24796fba-6de7-4712-b83e-b86969c31335
  :POST_DATE: [2012-01-31 Tue 15:08]
  :POSTID:   268
  :ARCHIVE_TIME: 2012-12-26 Wed 19:21
  :ARCHIVE_FILE: ~/projs/mastering-emacs-in-one-year-guide/guide-zh.org
  :ARCHIVE_CATEGORY: emacs
  :END:
Author: Chen Bin (redguardtoo)

Version: 20140911

Updated: [2014-09-11 Thu 23:30]

Created: [2012-01-31 Tue 15:08]

Copyright: This work is licensed under the [[http://creativecommons.org/licenses/by-nc-nd/3.0/][Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License]].

** Introduction
I was a Microsoft fan because I was born in China. There was no Unix culture when I was young. My professor knew as much as I knew about Unix. Zero knowledge. Nothing. I believed Microsoft Windows was the only platform worth developing software on. I believed Visual Studio was the best IDE in the world. I was so loyal to Microsoft that I used Visual Studio to edit the code running on Linux server during my first job.

Besides, computers scared me to death. I'm ashamed to admit now that when I graduated from university I didn't know clipboard. If I need input duplicated texts, I typed them character by character. I chose an IT career simply for money. There was no other career path for talented young people in China then.

So,
- This guide is about using Emacs as a professional's tool. I will not show off Emacs as a geek's toy because I am NOT that type from the beginning. I will focus on philosophy and methodology only. No technical details involved.
- If a computer dummy like me can [[https://github.com/redguardtoo][be good at Emacs in one year]], you definitely can do better.

** Why Emacs (OPTIONAL)
This section is short because my focus is HOW instead of WHY.
*** Emacs master is good at other editors naturally
You have already tasted the best. Your general expectation is higher.

Advanced tips in the eyes of a non-emacs guy are common sense in Emacs guy's eyes.

Allow me use package management as an example.

The Emacs person expects any decent text editor should have a package manager so she can install package easily. She is surprised that [[https://sublime.wbond.net/installation][package manager is NOT bundled in some editor]].

If a package is broken, it could be [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][fixed by the user]] without touching the package's code.

If the remote repository is shut down, she can [[https://github.com/redguardtoo/myelpa][create a repository]] in her memory stick [[https://github.com/redguardtoo/elpa-mirror][in one minute]].

In summary, she knows more than other modern text editors can implement.
*** Community behind Emacs is strong
Emacs is written in Lisp. Its syntax is like:
#+BEGIN_SRC elisp
(+ (/ 4 5 ) 9)
(concat "hello" "world")
#+END_SRC

# A developer who picks up Lisp is possibly more intelligent. The fact that she can get out of her comfort zone to love Lisp's unusual syntax proves that she is more curious than the average. Great curiosity is certainly first-ever linked to great intelligence.

Average developer can learn new languages (even non-mainsteam languages), but he will stay close to his comfort zone. A PHP guy learns Python because PYTHON and PHP are both interpreted language. That PHP guy avoid Java because he is afraid of compiled language.

A Lisp developer may also be more experienced because Lisp could be the third language she learns (Java/C/C# to pay the bill. Bash/Python/Perl/Ruby to glue the system. Lisp is the third).

No job ad will list Emacs as a required skill. That's actually a good thing. It ensures that only honest technical guys exist in Emacs community.
*** Emacs is more powerful
IDE is optimized for certain application framework. Emacs is more powerful on general development.

When people say IDE is good, they actually mean that [[http://en.wikipedia.org/wiki/Intelligent_code_completion][intelligent code completion]] is good.

Emacs can help a professional developer on every task she need handle, including code completion.

For example, as a freelancer, I spend most time on communication. I use [[http://gist.github.com]] to share prototype with other developers. Emacs has a [[https://github.com/defunkt/gist.el][plugin]] to do this thing efficiently. I also writes many emails to my agents to discuss my next contract. Emacs has a email client which can get the job done [[http://blog.binchen.org/posts/why-gnus-is-better-than-gmail.html][in crazy speed]].

Well, maybe you don't buy my story because you don't use github and you don't write email. Why not check other geek's live video demo: [[http://www.youtube.com/watch?v=EQAd41VAXWo][Emacs Power: Can your editor do THIS!]]
*** Investment will never expire
Emacs is maintained by a non-profit organization named Free Software Foundation (FSF). FSF has been around for almost 40 years. I assume it will exist for next 40 years. Emacs will live for a very long time.

A negative example is Microsoft Visual Studio:
- I extended Visual Studio 6 with my own VBA script. The script stop working after I upgraded to Visual Studio .NET.
- Key bindings in Visual Studio 6 were dumped in next version.
- Visual Studio 6 Professional had a nice profiling tool. That tool was removed in next Professional version because some MBA in Microsoft want me to pay more money to buy so-called Ultimate version.
- Sometimes Microsoft cannot get the UX right. Consider a feature like listing the functions in current file. The hot key for that command is shit. You have to pay tens of bucks to [[http://www.wholetomato.com/][get the right solution]]. I know you have enough cash to burn, but consider the trouble to update that plugin every year (it may be not free). In Emacs, it's just [[http://www.emacswiki.org/emacs/ImenuMode][a few lines of code]] in your plain text file ".emacs" which support all the programming languages *forever*.
*** No overhead
The Emacs installer is a [[http://ftp.gnu.org/gnu/emacs/windows/][50M bytes zip file]]. The zip file contains a portable program which you could place anywhere.

My configuration of Emacs is powerful. It can handle most popular languages (Java/C/C++/Ruby/Javascript/PHP/CSS/LUA/SQL/...). Yet it's just another [[https://github.com/redguardtoo/emacs.d/archive/master.zip][5M bytes zip]]. It can be extract to any folder.

So in order to set up my fully functional develop environment I just need handle two zip files. 10 minutes job at maximum.

Compare this with the pain of installing latest Visual Studio!
*** Use your spare time
*Your spare time* of one year is enough to master Emacs. As a freelancer, I'm the last one in the world willing to sacrifice my work day to learn Emacs. 15 minutes per day is enough.

*** What matters is Attitude
If I could only give one piece of advice to the beginner, it would be *being open minded*. 

For example, newbies usually assume that the key binding is an important skill. They spend too much time to remember key bindings. Some vi users would rather give up vi muscle memory when using Emacs. Wrong, Wrong, Wrong!

Actually, key binding is the most trivial thing in Emacs. Emacs is powerful enough to let you choose [[http://www.emacswiki.org/emacs/Evil][another way]]. Even you want to memorize Emacs key bindings, you'd better start by inserting the complete command into the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Minibuffer.html][MiniBuffer]].

Trust me, don't remember any key biding at all. Some tutorial lists the "Basic Commands" in Emacs. You may think those commands is *required* to memorize. I don't agree. For example, "Alt-<" (go to the beginning of file) and "Alt->" (go to the end of file) are listed as basic commands, I don't know now those basic commands at all, even now. I have not used these two commands for at least 12 months. "Alt-G Alt-G" (go to the line) is a more useful, though it's not listed at all.

Many people failed because they had such *wrong* assumptions before plunging into Emacs. They wasted precious time on meaningless things.

** Step by Step Guide
*** Quick guide for greenhands of Linux/Unix (OPTIONAL) 
Here are the steps:
- Install Emacs 24
- Don't install any plugins
- Learn basic knowledge about [[http://en.wikipedia.org/wiki/Environment_variable][environment variable]] and [[http://en.wikipedia.org/wiki/Redirection_%28computing%29][pipe]]
- Read the official tutorial
- Use [[http://www.emacswiki.org/emacs/OrgMode][org-mode]]
- The only hot key you need learn in org-mode is TAB key

Use Emacs in this way for several days in order to understand:
- Why people love Emacs
- How Emacs interact with other programs
*** Read the official tutorial
Start Emacs, press ALT and X key together (M-x is used as abbreviation for Alt-X, C-x for Ctrl-X from now on). Input "help-with-tutorial", press ENTER. That's all you need to open the tutorial.

Reading this tutorial will take you about half an hour. It's not too much time to learn a life time skill.

Reading tutorial is essential. Do not skip this step. For example, many Emacs newbies asked me how to look up online manual for some command. This has already been answered in the tutorial.

*** Find a real world problem to solve
That's the most important question you need ask yourself at the beginning.

The learning is like investment. If you can get huge benefit by investing a little time, you will be motivated and keep on the learning.

For example, [[http://orgmode.org/][Org-mode]] is the best time-management tool I can find.
*** Stand on the shoulders of giants
This section is *the most important section* of the whole article!

I learned this lesson the hard way. At the beginning, I regarded Emacs as some geek's toy. I digged around the internet for the Lisp code I can paste into my ~/.emacs.

That's totally a waste of time if my goal is to become an Emacs master!

I should copy [[https://github.com/purcell/emacs.d][Steve Purcell's]] setup at the beginning!

Please don't repeat my mistake. Don't hesitate. Just follow Steven Purcell!

Let me be blunt. You are a newbie, you'd better copy and study top geek's code. Don't try to be creative at this stage. You'll waste your time trying to re-invent the wheel.

For example, some readers tell me that Emacs has too many hot keys. They can't memorize all of them. This is typical behavior in newbies. They assume that top geeks can remember more key bindings.

Wrong!

If you have studied any master's setup, you will find that she uses [[http://www.emacswiki.org/emacs/Smex][Smex]] to remember the frequently used command, as it is often more efficient than pressing hot keys. So the master don't remember key bindings intentionally.

Since Steve Purcell loves new technologies and update his setup frequently, it may be a little harder to follow him for beginners.

That's actually great. I'm lucky to pick up his setup and stick to it. Simply pulling from his git branch gets me updated with the latest cool things in community.

When I say "on the shoulders of giants", I'm stressing that you need set your standard higher. I'm NOT saying the top guy's setup is "newbie friendly". If it happens to be "friendly", it's just the coincidence.

This section is discussing *what's the best way to be good, not the easiest way*.

There is a huge difference between best and easiest. For example, a setup using Vim key bindings is absolutely NOT easy for newbie but definitely efficient.

If you are still not convinced, consider my reasons:
- When I say mastering Emacs, I mean it. It's not OK at Emacs. It's not good at Emacs. It's actually among the best ones.
- Those giants are more intelligent than me. They are more harder working than me. How can I reach their level as quickly as possible?
- The obvious way is to join them.
- If you can report a bug about the master's setup, at least in that moment, you have proven you are better at a certain issue than the master.
- You will get guidance from the master when she analyzes your bug report.

Anyway, if Purcell is too challenging to follow (What a pity, BTW), there is more stable one like [[http://eschulte.github.io/emacs-starter-kit/][Eric Schulte's Emacs Starter Kit]].
*** Report bugs
The best way to learn Emacs is to become the padawan of the master.

In real world, the master won't waste any time on you unless you report bugs to her. By reporting bugs, you have made visible contribution. That's only sure way to get the guidance from the master.

For example, I learned [[phttp://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][some advanced Lisp skill]] by [[https://github.com/capitaomorte/yasnippet/issues/256][reporting a bug]]. The extra bonus of learning by bug report is that knowledge learned from practical case study is hard to forget.

*** Better yourself everyday
I started from [[https://sites.google.com/site/steveyegge2/tour-de-babel][Steve Yegges' article]]. The most inspiring text in the article is as below,
#+BEGIN_EXAMPLE
Go look over Paul Nordstrom's shoulder while he works sometime, if you don't believe me. It's a real eye-opener for someone who's used Visual Blub .NET-like IDEs their whole career.
#+END_EXAMPLE

After reading the text, I decided to be as good as Paul Nordstrom. It's mission impossible considering [[http://www.linkedin.com/in/paulnpcom][who Paul Nordstrom is]]. The reason to set a goal I can never reach is to make me not to stop improve. Whatever minor task I takes, I always ask myself how Paul Nordstrom will handle it. Is my operation efficient enough that Steve Yegge will be surprised?

For example, switch focus between sub-windows in Emacs is not efficient by default. I need press "Ctrl-x O" several times to jump to a sub-window. After some investigation,I found [[https://github.com/dimitri/switch-window][switch-window]]. Press "Ctrl-x O" plus number key to finish the operation. I kept searching and found [[https://github.com/nschum/window-numbering.el][window-numbering]]. ALT key plus number key is enough. That's 60% productivity improvement. Alt key is still a little bit far away from my fingers. Another improvement is to use [[https://gitorious.org/evil/pages/Home][Evil-mode]] and [[https://github.com/cofi/evil-leader][evil-leader]], I need only [[https://github.com/redguardtoo/emacs.d/blob/master/init-evil.el][press comma key and number key to switch window]].
*** Join the community
I suggest focusing on Emacs only in order to take full advantage of communities.

For example, although Quora.com has lots of interesting stuffs, *do not* read/subscribe/follow them unless it's releated to Emacs.
**** Google Plus
[[https://plus.google.com/communities/114815898697665598016][Emacs community on Google Plus]] is the best. The average quality of discussion on Google Plus is better.

BTW, the Emacs geek [[https://plus.google.com/113859563190964307534][Xah Lee]] hosts a Q/A session at Google Plus every Tuesday. His web site is [[http://xahlee.org/]].

**** Github
It'*s a social network for developers.
   *
You* can search [[https://github.com/languages/Emacs%20Lisp]] for latest Elisp code.
**** Emacs blogs
[[h*ttp://planet.emacsen.org/][Planet Emacsen]] is the hub best Emacs blogs.
**** Quora.com
Follow the question on specific topic instead general one. For example, "What's the best Emacs addon" is more useful than "How to learn Emacs".

Everybody can say something about a general question. But to answer a specific question, you need first-hand experience.

Even if you are only interestd in general questions, starting from more practical question is still better. Find the people who provides the best and the shortest answer and follow her.
**** Blogs
[[http://planet.emacsen.org/][Planet Emacsen]] is the best collection of Emacs related blogs.
**** Twitter
I use keyword "emacs :en" to search latest news. The reason to search English only twitter is that there are lots of Japanese post and I don't know Japanese.
**** StackOverflow
Insert "emacs-related-keywords site:stackoverflow.com" in Google search engine.

The quality on stackoverflow discussion is good but there are not many new questions there.
**** Youtube
Some videos are great.

For example, [[http://www.youtube.com/watch?feature=player_embedded&v=oJTwQvgfgMM][Emacs Org-mode - a system for note-taking and project planning]] is the best tutorial on org-mode. Carsten Dominik makes me realize that org-mode is simple. The only thing I need remember is pressing "TAB" key to expand a text node. That's the killer feature of org-mode. Other stuff are bonus.

Youtube lists the best matched results at the top. So you will always see the same things. I suggest sorting the results by upload date.
** Readings
*** EmacsWiki
[[http://www.emacswiki.org/emacs/][EmacsWiki]] has all the tips you need for tweaking the Emacs. It's actively maintained by the community.

*** Emacs Lisp book
The only paper book you need read is [[http://www.amazon.com/Writing-GNU-Emacs-Extensions-Glickstein/dp/1565922611][Writing GNU Emacs Extensions]] by Bob Glickstein. I like his writing style and the way he organizes chapters.

Xah Lee's [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Emacs Lisp tutorial]] is practical and easy to read.

Steve Yegge's [[http://steve-yegge.blogspot.com.au/2008/01/emergency-elisp.html][Emergency Elisp]] is short but it includes the necessary information for writing Emacs Lisp.

I don't recommend studying the Lisp at the beginning unless you are confident about your Emacs mastery.
** Knowledge management 
*** Place your setup at Github, *publicly*
I uploaded my setup onto [[https://github.com/redguardtoo/emacs.d]].

Github is the most efficient way of knowledge management because you will never lose the setup.

I benefit a lot by sharing. People who use my setup are actually making my setup perfect. I am the first guy who benefits from a better setup.

For example, people reported that I mixed my personal stuff (email address, full path of my hobby project) into my setup which they need remove before usage. They expected it usable out of the box.

So I re-organized it and placed private stuff into a independent file named "privacy.el". That file is outside of my Emacs configuration. Then it occurred to me that in corporate environment it was not safe to store plain privacy.el on a shared computer without encryption. After some research, I found Emacs already provided [[http://www.emacswiki.org/emacs/EasyPG][a perfect solution]] since version 23.

In order to get the most benefit of sharing, you need make sure your setup is qualified to share publicly. I hate those guys who hardcode their name like "/home/john/.emacs.d/" in their setup. Unless I happen to be John, I have to waste my time to fix all those stupid names. I suggest ignore any setup with hardcoded things. There are plenty of superiors at github.
*** Dropbox
Place all the Emacs related documents at Dropbox. Since dropbox will synchronize the documents into the mobile devices, you can study Emacs when commuting.
** My favorite Emacs addons
I'm not suggesting that you must use these addons. There are many other addons which are as good as the ones in the list.

The purpose to try these addons is to get the idea that a typical Emacs user's expectation on quality is very high.

| Name                | Description                        | Alternatives                      |
|---------------------+------------------------------------+-----------------------------------|
| [[http://www.emacswiki.org/emacs/Evil][Evil]]                | convert Emacs into vim             | none                              |
| [[http://orgmode.org][org-mode]]            | [[http://en.wikipedia.org/wiki/Getting_Things_Done][Get Things Done (GTD)]]              | none                              |
| [[https://github.com/company-mode/company-mode][company-mode]]        | code completion                    | cedet, auto-complete              |
| [[https://github.com/magnars/expand-region.el][expand-region]]       | selection region efficiently       | none                              |
| [[https://github.com/nonsequitur/smex][smex]]                | Input command efficiently          | none                              |
| [[https://github.com/capitaomorte/yasnippet][yasnippet]]           | text template                      | none                              |
| [[http://www.emacswiki.org/emacs/FlyMake][flymake]]             | syntax check.                      | flycheck                          |
| [[https://github.com/emacs-helm/helm][helm]]                | a framework to choose candidates   | ido                               |
| [[http://www.emacswiki.org/emacs/InteractivelyDoThings][ido]]                 | similar to helm                    | helm                              |
| [[https://github.com/mooz/js2-mode][js2-mode]]            | everything for javascript          | javascript-mode,js-mode,js3-mode  |
| [[http://www.emacswiki.org/emacs/emacs-w3m][w3m]]                 | browser                            | Eww                               |
| [[https://github.com/nicferrier/elnode][elnode]]              | web server                         | none                              |
| [[https://github.com/Fuco1/smartparens][smartparens]]         | auto insert matched parens         | autopair                          |
| [[https://github.com/nschum/window-numbering.el][window-numbering.el]] | jump focus between sub-windows     | switch-window.el                  |
| [[https://github.com/fxbois/web-mode][web-mode]]            | everything for edit HTML templates | nxml-mode、nxhtml-mode、html-mode |

** Emacs is way of life
Emacs guys have different ways of life. They are basically people who are hacking Lisp code for fun. Sometimes they will get the job done in a creative way. For example, [[http://sachachua.com/blog/][Sacha Chua]] mentioned that [[http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/][she let Emacs read the manual when cooking]].

So *what benefit* can I get after knowing the Emacs way?

When I learned Emacs, I could not endure the default key bindings of my browser Firefox. So I installed a Firefox addon [[https://github.com/mooz/keysnail/wiki][Keysnail]] to convert Firefox into Emacs. That doubled my speed in browser navigation. As a web developer, I am doing the browser navigation thing everyday.

Then I realized that Keysnail was awesome because [[https://github.com/mooz][its developer mooz]] was awesome. I followed him and used whatever he used. His [[https://github.com/mooz/percol][percol]] made all my operations (git, [[http://blog.binchen.org/posts/how-to-do-the-file-navigation-efficiently.html][file navigation]], database management ...) under shell ten times faster.

After knowing the Emacs way, things that was important become trivial now. For example, I don't care which text editor has better file explorer. Why should I use any file explorer if I am ten times faster in shell?

I'm also more willing to share. For example, some colleague asked me to share my file navigation snippet. I gave it away without hesitation.

If he would equal sharing knowledge to giving up power, he had already lost in the competition to be more powerful.

We are living in the world of science and engineering. I improve myself *more quickly* by sharing to the best, by learning from the best. Knowledge is not black magic. Hiding knowledge will make it stale.

** FAQ
*** Any documentation on Steve Purcell's setup?
Nope. Read its README and code comment. The header of the code file usually has some usage guide.
*** Any simpler setup than Steve Pucell's?
Check out [[https://github.com/redguardtoo/emacs.d][my setup]].

Because I do some desktop development. it has less web stuff than Purcell.
*** As a Vi guy, why should I turn to Emacs?
I am a Vi guy. I turn to Emacs because it's powerful and it can be extended with Lisp.

Vi is efficient in text editing because its model editing. In Emacs, I use [[http://www.emacswiki.org/emacs/Evil][Evil]] to simulate Vim.

*** I don't like Emacs default key bindings
[[http://ergoemacs.org/][ergoemacs]] if you prefer Microsoft's key bindings.
*** Emacs has too many key bindings to memorise
Use [[http://www.emacswiki.org/Smex][Smex]]. It's a myth that a Emacs guru must remember many key bindings.
*** I am not comfortable with other people's setup. Can I modify it?
Try to understand the master's setup at first. Don't make judgment too early. It's easy to make judgment. But understanding needs wisdom and hard work.

For example, some people reported that there was some weird character at column 80 when editing a file. That's actually a feature to remind the user not to create any line with width more than 80 columns. [[http://www.emacswiki.org/emacs/EightyColumnRule][Here is the reason]].

*** I've cloned the master's setup but the package is not updated. No error message.
Remove the file .emacs in your HOME directory. The ~/.emacs.d/init.el has same functionality.
*** I have some specific question about Emacs
Please,
- read official tutorial
- google
For example, google "emacswiki init.el" to understand what's the init.el
*** I got some error message when starting Emacs with master's setup
That message could be ignored. It's often just the warning message when Emacs can't find some OPTIONAL third party command line tool.

If you need install that missing tool, search the list in [[https://github.com/redguardtoo/emacs.d][my readme]].

If you are sure it's actually an error message instead of a warning message, 
- Run "emacs -nw --debug-init" in terminal.
- Send the output to the author of the setup.
- Please use bug tracker if possible.

*** My simple setup is more controllable
That's what I thought at the beginning. After several months I realized that I could never be as good as a master like Steve Purcell if keeping this way.

While I spend serveral weeks to overcome some minor issues in Emacs setup, Purcell has already installed/developed dozens of cool plugins.

If I cannot win, the only strategy is to join him, that's why I clone his setup and start to report bug for him. Here is [[https://github.com/purcell/emacs.d/issues/6][first issue I reported]]. Besides, reporting bugs also gives me the opportunity to talk with the master.

So don't run away from the master's huge setup. Regard it as a challenge to improve yourself.
*** Why I cannot add my own plugins after using the master's setup
Though the quality of Emacs plugins are generally good, they may have compatibility issues. It's usually because plugins are developed by different people. For example, both [[https://github.com/auto-complete][auto-complete]] and [[https://github.com/capitaomorte/yasnippet][yasnippet]] will use TAB key to expand code. So there is confict if I use both plugins.

That's another reason to stick to the master's setup at the beginning.
*** How to use Emacs on windows
Install Cygwin!

When you have enough knowledge about environment variables and pipe. You can check [[http://stackoverflow.com/questions/3286723/emacs-cygwin-setup-under-windows/13245173#13245173][My answer at stackoverflow]] to use native windows version.

*** Is code-navigation and code-completion as good as IDE?
Thanks to [[http://clang.llvm.org/][clang]] && [[http://www.gnu.org/software/global/][GNU Global]], C++ is perfect now. Support for other languages are also good enough. 
*** Why Emacs cannot download packages?
If you are living in North Korea, Iran, China, you need below command line to start Emacs:
#+BEGIN_SRC elisp
http_proxy=your-proxy-server-ip:port emacs -nw
#+END_SRC

How to configure proxy server is not covered here.
*** As a greenhand of Emacs, should I learn Emacs lisp at first?
NO.

Most people lose the interest in Lisp because there is not enough stimulus. You can finish the Java/C#/Javascript course because that's required by profitable jobs.

That's why I stress that you need avoid tweaking Emacs. Please copy the master's setup at first.

Unless you have seen how the Lisp code gets your job done, you will not have the enough stimulus to *finish* the lisp course.
*** After knowing the basic operation of Emacs, what should I learn next?
Find your practical problem which only Emacs can do best. Trust me, Emacs is much more powerful than your wildest imagination.

Here is my example:
- When I use wordpress blog, I use [[https://github.com/punchagan/org2blog][org2blog]] to post articles. It's ten times faster than any other client.
- I installed cmake-mode to do the cross-platform development with [[http://www.cmake.org/Wiki/CMake/Editors/Emacs][cmake]].
- window-numbering.el is useful when jumping focus between sub-windows.
- When I work for some huge projects, I use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to comment code lines because I need deal with too many programming languages. 

*** What do you think "Emacs can do everything"?
"Can do" does not equals "Do in the best way".

Yes, there are *demos* to prove Emacs can do everything.

But sometimes Emacs might not be the best solution even its demo looks good.

[[gnu.org/software/emacs/manual/html_node/emacs/Document-View.html][DocView mode]] is boasted as a proof that Emacs could be used as a PDF viewer. You can open two sub-windows in Emacs. One for viewing PDF. The other for coding.

It's actually not a perfect solution because Emacs needs call some command line tool to convert the PDF into png image before displaying the PDF. It's slow and costs too much memory. Besides, it's impossible to extract text from the Emacs PDF viewer. That's a show stopper if I'm viewing a programming ebook because I cannot paste code from PDF.

There are tons of other perfect PDF viewers. They are quick. They can handle huge PDF files. Text embedded in PDF can be extracted.

Even if you want to display the PDF viewer and code editor side by side. Emacs is still not a better solution. Tile windows managers like [[http://i3wm.org/][i3]] is a professional tool to handle these things.

So be practical. [[http://en.wikipedia.org/wiki/Richard_Stallman][Richard Stallman]] created whole GNU echosystem for you. Emacs is only one component. Why not take full advantage of the system?

** Contact me
My [[https://twitter.com/#!/chen_bin][twitter]] and [[https://plus.google.com/110954683162859211810][google plus]].

My blog is [[http://blog.binchen.org]].

Please don't ask basic questions. I've already shown you how to find the answer by yourself.
** Summary
Start from fun, follow the best people, reading and practice.

I recognize that all roads lead to Rome. So other methods may also work. But my method did work on me.

This article is basically the summary of my own journey to Rome.

Whichever way you take, please regard Emacs as professional's tool. It deserves your respect.

This article is published at [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide]].

Please use github's bug tracker instead of sending me email for your own good. Github notification mail is always in my first priority folder.

Emacs is actually more a platform than a software. Interesting people and addons keep popping up on that platform. I will update this article from time to time in the future.
